<div id="prompt">
  <div id="innerprompt">
  </div>
</div>

<div class="clickarea hide" id="arrow-top">
  <%= image_tag("arrow-up-right.svg", class:"arrow-top")  %>
</div>

<div class="wreckit clickarea">Bubble me</div>

<section class="fading" style="display: none;">
  <video></video>
</section>

<div class="wrapper">
  <canvas id="canvas" width="100%" height="100%"></canvas>
  <div class="menu-menu">
    <ul class="fixed">
      <% @projects.each do |project| %>
      <li class="title-project"><%= project.name %><%= image_tag("arrow-up-right.svg", class:"arrow-project arrow fading") %></li>
      <li class='undernote hide'><%= project.undernote%></li>
      <li class="description-project hide fade-in">
        <span class="whiteshadow"><%= project.description%></span>
      </li>
      <li class="website hide fade-in website-link clickarea">
        <%=link_to_blank("See website", project.website) if project.website %>
        <%=link_to_blank("Download", project.download) if project.download %>
      </li>
      <li class="space hide"></li>
      <% end %>
    </ul>
  </div>

  <div class="projects">
   <div class="cursor"></div>
   <ul>
    <% @projects.each do |project| %>
    <div class="projectbg">
      <div class="mobile-only sticky">
        <ul class="bottom-bar">
          <li class="projecttitlemobile"><%= project.name %></li>
          <li class="infomobile fading">Info</li>
        </ul>
        <div class="infomobileshow website-link">
          <ul>
            <li class="undernote"><%= project.undernote%></li>
            <li class="description-mobile"><%= project.description%></li>
            <li><%=link_to_blank("See website", project.website) if project.website %></li>
            <li><%=link_to_blank("Download", project.download) if project.download %></li>
          </ul>
        </div>
      </div>
      <div class="colorbg clickarea clickcursor">
        <div class="main-carousel mobile-only">
          <% if project.pictures.present? %>
          <% project.pictures.each do |picture| %>
          <% if /mp4/ =~ picture.url %>
          <%= video_tag(picture.url, autoplay: true, loop:true, muted:true, playsinline: true,class:"project-image-first clickcursor mobile-only carousel-cell video")%>
          <% else %>
          <%= image_tag(picture.url, class:"project-image-first clickcursor mobile-only carousel-cell")%>
          <% end %>
          <% end %>
          <% end %>
        </div>
        <% if project.pictures.present? %>
        <% if /mp4/ =~ project.pictures.first.url %>
        <%= video_tag(project.pictures.first.url, autoplay: true, loop:true, muted:true, playsinline: true,class:"project-image-first clickcursor notmobile projectimg video")%>
        <% else %>
        <%= image_tag(project.pictures.first.url, class:"notmobile project-image-first projectimg clickcursor") %>
        <% end %>
        <% project_pictures_array = [] %>
        <% project.pictures.pluck(:url).each { |p| project_pictures_array << image_path(p) } %>
        <div data-images="<%= project_pictures_array %>" class="data-images"></div>
        <% else %>
        <input class='input-font' type="text" placeholder="the lazy dog jumped over the quick brown fox" style='font-family:<%= project.font %>'>
        <% end %>

      </div>
    </div>
    <% end %>
  </ul>
</div>
</div>

<script type="shader/vertex" id="vs">
  attribute vec4 position;

  void main() {
  gl_Position = position;
}
</script>

<script type="shader/fragment" id="fs">

  precision mediump float;

  uniform vec2 resolution;
  uniform float time;
  uniform vec2 mousePosition;

  void main() {
  vec2 uv = gl_FragCoord.xy / resolution.xy;
  vec2 mousePosition = mousePosition.xy / resolution.xy;

  vec2 p[4];
  p[0] = vec2(0.1, 0.9);
  p[1] = vec2(0.9, 0.9);
  p[2] = vec2(0.5, 0.1);
  p[3] = mousePosition;

  vec3 c[4];
  c[0] = vec3( ( 150.0 / 255.0 ), ( 214.0 / 255.0 ), ( 237.0 / 255.0 ) );
  c[1] = vec3( ( 255.0 / 255.0 ), ( 255.0 / 255.0 ), ( 255.0 / 255.0 ) );
  c[2] = vec3( ( 255.0 / 255.0 ), ( 250.0 / 255.0 ), ( 200.0 / 255.0 ) );
  c[3] = vec3( ( 250.0 / 255.0 ), ( 160.0 / 255.0 ), ( 12.0 / 255.0 ) );

  float blend = 2.0;


  // calc IDW (Inverse Distance Weight) interpolation
  float w[4];
  vec3 sum = vec3( 0.0 );
  float valence = 0.0;
  for( int i = 0; i < 4; i++ ) {
  // 0 ... 1
  float distance = length( uv - p[i] );
  if( distance == 0.0 ) {
  distance = 1.0;
}

float w =  1.0 / pow( distance, blend );
sum += w * c[i];
// sum = mix( sum, c[i], ( 1.0 - distance ) );
valence += w;
}
sum /= valence;


// apply gamma 2.2 (Approx. of linear => sRGB conversion. To make perceptually linear gradient)
sum = pow( sum, vec3( 1.0 / 1.0 ) );


// output
gl_FragColor = vec4( sum.xyz, 1.0 );

}
</script>

